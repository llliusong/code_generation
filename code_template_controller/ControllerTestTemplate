package com.jy.dingding.wangba.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.WebApplicationContext;

import javax.servlet.http.Cookie;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;

/**
 * Created by pine on  2017/3/23 上午10:29.
 */
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration({"classpath:spring-mvc.xml", "classpath:spring-mybatis-test.xml", "classpath:spring-shiro.xml"})
//当然 你可以声明一个事务管理 每个单元测试都进行事务回滚 无论成功与否
@TransactionConfiguration(defaultRollback = true)
@Transactional
public class #pine#ControllerTest {

    private MockMvc mockMvc;

    @SuppressWarnings("SpringJavaAutowiringInspection")
    @Autowired
    protected WebApplicationContext wac;

    private Cookie cookie = null;

    @Before
    public void setup() throws Exception {
        this.mockMvc = webAppContextSetup(this.wac).build();
        Integer wangbaId = 3064;
        Integer userId = 4255;
        cookie = BaseController.setCookie(userId, wangbaId);
    }

    @Test
    public void select() throws Exception {
        MvcResult mvcResult = mockMvc.perform(get("/*pineapi/list.json")
                .param("id","1")
                .cookie(cookie)).andExpect(status().isOk())
                .andDo(MockMvcResultHandlers.print()).andReturn();
        JSONObject json = (JSONObject) JSON.parse(mvcResult.getResponse().getContentAsString());
        System.err.println("json = " + json);
        Assert.assertEquals(json.get("result"), 0);
    }

    @Test
    public void save() throws Exception {

    }

    @Test
    public void update() throws Exception {

    }

    @Test
    public void delete() throws Exception {
        MvcResult mvcResult = mockMvc.perform(post("/*pineapi/delete.json")
                .param("id","1")
                .cookie(cookie)).andExpect(status().isOk())
                .andDo(MockMvcResultHandlers.print()).andReturn();
        JSONObject json = (JSONObject) JSON.parse(mvcResult.getResponse().getContentAsString());
        System.err.println("json = " + json);
        Assert.assertEquals(json.get("result"), 0);
    }

}
